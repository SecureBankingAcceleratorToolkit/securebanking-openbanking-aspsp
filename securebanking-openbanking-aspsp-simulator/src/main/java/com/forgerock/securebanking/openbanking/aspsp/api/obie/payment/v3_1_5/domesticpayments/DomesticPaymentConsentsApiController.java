/**
 * Copyright Â© 2020 ForgeRock AS (obst@forgerock.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.forgerock.securebanking.openbanking.aspsp.api.obie.payment.v3_1_5.domesticpayments;

import com.forgerock.securebanking.openbanking.aspsp.common.util.PaginationUtil;
import com.forgerock.securebanking.openbanking.aspsp.service.AnalyticsService;
import com.forgerock.securebanking.openbanking.aspsp.service.balance.FundsAvailabilityService;
import lombok.extern.slf4j.Slf4j;
import org.joda.time.DateTime;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import uk.org.openbanking.datamodel.account.Meta;
import uk.org.openbanking.datamodel.payment.OBFundsAvailableResult1;
import uk.org.openbanking.datamodel.payment.OBWriteDataFundsConfirmationResponse1;
import uk.org.openbanking.datamodel.payment.OBWriteFundsConfirmationResponse1;

import javax.servlet.http.HttpServletRequest;
import java.security.Principal;

@Controller("DomesticPaymentConsentsApiV3.1.5")
@Slf4j
public class DomesticPaymentConsentsApiController implements DomesticPaymentConsentsApi {

    private final FundsAvailabilityService fundsAvailabilityService;
    private final AnalyticsService analyticsService;

    public DomesticPaymentConsentsApiController(FundsAvailabilityService fundsAvailabilityService,
                                                AnalyticsService analyticsService) {
        this.fundsAvailabilityService = fundsAvailabilityService;
        this.analyticsService = analyticsService;
    }

    @Override
    public ResponseEntity getDomesticPaymentConsentsFundsConfirmation(
            String consentId,
            String accountId,
            String amount,
            String authorization,
            DateTime xFapiAuthDate,
            String xFapiCustomerIpAddress,
            String xFapiInteractionId,
            String xCustomerUserAgent,
            String httpUrl,
            HttpServletRequest request,
            Principal principal
    ) {
        // Check if funds are available on the account selected in consent
        boolean areFundsAvailable = fundsAvailabilityService.isFundsAvailable(accountId, amount);

        return ResponseEntity
                .status(HttpStatus.OK)
                .body(new OBWriteFundsConfirmationResponse1()
                        .data(new OBWriteDataFundsConfirmationResponse1()
                                .fundsAvailableResult(new OBFundsAvailableResult1()
                                        .fundsAvailable(areFundsAvailable)
                                        .fundsAvailableDateTime(DateTime.now())
                                ))
                        .links(PaginationUtil.generateLinksOnePager(httpUrl))
                        .meta(new Meta())
                );

    }
}